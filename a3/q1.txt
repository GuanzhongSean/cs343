(a) Performance Experiments

| Version   | Tasks | User Time (u) | System Time (s) | Real Time (r) | Memory (kb) |
| STACK     | 1     | 0.79u         | 0.00s           | 0:00.73r      | 6448kb      |
| STACK     | 2     | 1.66u         | 0.00s           | 0:00.71r      | 8540kb      |
| STACK     | 4     | 3.64u         | 0.01s           | 0:00.84r      | 10524kb     |
| DARRAY    | 1     | 3.29u         | 0.01s           | 0:03.02r      | 6396kb      |
| DARRAY    | 2     | 6.85u         | 0.02s           | 0:03.25r      | 8424kb      |
| DARRAY    | 4     | 14.90u        | 0.02s           | 0:03.44r      | 10360kb     |
| VECTOR1   | 1     | 3.86u         | 0.01s           | 0:03.53r      | 6392kb      |
| VECTOR1   | 2     | 7.96u         | 0.03s           | 0:03.66r      | 8388kb      |
| VECTOR1   | 4     | 16.80u        | 0.04s           | 0:03.90r      | 10500kb     |
| VECTOR2   | 1     | 19.87u        | 0.04s           | 0:18.23r      | 6380kb      |
| VECTOR2   | 2     | 41.31u        | 0.10s           | 0:21.88r      | 8420kb      |
| VECTOR2   | 4     | 88.59u        | 0.12s           | 0:23.30r      | 10480kb     |

(b) Performance and Allocation Differences
1. STACK Allocation:
- Fastest execution time across all configurations.
- Memory usage increases slightly with more tasks.

2. DARRAY Allocation (Heap - Dynamic Array):
- Slower than STACK due to heap allocation overhead.
- More significant increase in user time as tasks increase, indicating overhead from dynamic memory management.

3. VECTOR1 Allocation (Preallocated Vector):
- Similar behavior to DARRAY but slightly worse in terms of execution time.
- The overhead of managing a vector and accessing elements using `.at()` adds extra computation.

4. VECTOR2 Allocation (Dynamic Growth Vector):
- Worst performance among all implementations.
- The `push_back` operation causes frequent reallocations, leading to a massive increase in execution time.
- Very inefficient for large-scale operations.

Scaling with Tasks: As the number of tasks increases, the user time increases almost linearly for all versions. However, the real time does not increase proportionally, indicating that the program is effectively utilizing multiple core.
Memory Usage: The memory usage increases with the number of tasks, but the difference between the versions is minimal.

(c) Performance Scaling Analysis
STACK: The STACK version scales well with the number of tasks, as the real time remains low even as the user time increases. This suggests that the program is effectively parallelized, and the overhead of stack allocation is minimal.

DARRAY/VECTOR1: These versions also scale reasonably well, but the user time is significantly higher than the STACK version due to the overhead of heap allocation. The real time increases slightly as the number of tasks increases, indicating some inefficiency in parallelization.

VECTOR2: The VECTOR2 version performs poorly, especially with more tasks. The user time increases dramatically, and the real time also increases significantly. This is likely due to the inefficiency of dynamically resizing the vector, which introduces additional overhead and reduces the effectiveness of parallelization.
