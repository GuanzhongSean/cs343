A4Q1

(a) Performance Comparison (Parameters: 50000000 10)

| Version        | User Time (u) | System Time (s) | Real Time (r) | Peak Memory (Mkb) | `malloc()` Calls |
| ARRAY          | 0.92u         | 0.01s           | 0:00.93r      | 5176kb            | 49               |
| STRING         | 208.16u       | 0.48s           | 3:27.98r      | 5220kb            | 3,500,000,054    |
| STRSTREAM      | 78.64u        | 0.18s           | 1:18.59r      | 5200kb            | 51               |
| ARRAY (-O2)    | 0.31u         | 0.00s           | 0:00.31r      | 5212kb            | 49               |
| STRING (-O2)   | 111.74u       | 0.27s           | 1:51.68r      | 5160kb            | 3,500,000,054    |
| STRSTREAM (-O2)| 75.28u        | 0.18s           | 1:15.25r      | 5184kb            | 51               |

(b) Performance and Memory Allocation Differences

1. `ARRAY`: Internal Buffering (Fastest)
- Uses stack memory, avoiding dynamic allocations (`malloc`).
- Only 49 memory allocations (`malloc_stats`).
- Fastest because stack memory is pre-allocated, requiring no heap interaction.

2. `STRING`: External Buffering with `std::string` (Slowest)
- Creates many temporary strings, leading to billions of memory allocations.
- Triggers frequent reallocation and copying due to dynamic resizing.
- Total `malloc` calls: 3.5 billion (worst case).
- Severe heap fragmentation further slows performance.

3. `STRSTREAM`: External Buffering with `std::stringstream` (Better than STRING)
- Preallocates using an internal buffer that minimizes heap allocations.
- Only 51 `malloc` calls.
- Faster than STRING, but slower than ARRAY due to stream formatting overhead.

Key Memory Usage Findings
| Version   | `malloc()` Calls | Storage Requested     | Storage Allocated     |
| ARRAY     | 49               | 89,259 bytes          | 99,456 bytes          |
| STRING    | 3,500,000,054    | 174,500,091,744 bytes | 280,000,102,448 bytes |
| STRSTREAM | 51               | 90,797 bytes          | 101,632 bytes         |

- STRING suffers from excessive heap fragmentation, leading to slowdowns.
- STRSTREAM behaves similarly to ARRAY in memory allocation but has stream overhead.
- STRING’s poor memory efficiency explains its severe performance drop.

(c) Effect of Compiler Optimization (-O2)
Optimization results:
- ARRAY sees a ~3x speedup (0.92u → 0.31u).
- STRING improves (~1.86x speedup), but remains extremely slow due to memory inefficiencies.
- STRSTREAM sees minimal improvement (~4% faster) since its bottleneck is formatting, not allocation.

Why does -O2 help STRING more than STRSTREAM?
- STRING benefits from optimization because the compiler reduces allocation overhead.
- STRSTREAM already minimizes allocations, so optimization has less impact.

(d) Explanation of Performance Differences: Internal vs. External Buffering

Why is STRING the slowest?
- Every concatenation (`+=`) creates a new temporary string.
- Each new string may trigger a heap reallocation and copy.
- Billions of memory allocations lead to severe slowdowns.

Why is STRSTREAM faster than STRING?
- It preallocates an internal buffer, avoiding frequent allocations.
- Direct writes using `<<` are more efficient than `+=` with strings.
- Only 51 `malloc` calls, similar to `ARRAY`.

Why is ARRAY the fastest?
- No heap allocations.
- Stack memory is already available.
- No copying, resizing, or heap fragmentation.
